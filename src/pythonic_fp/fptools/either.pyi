# Copyright 2023-2025 Geoffrey R. Scheller
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

__all__ = ['Either', 'LEFT', 'RIGHT']

from collections.abc import Callable, Iterator, Sequence
from typing import Never, overload, TypeVar
from pythonic_fp.booleans.subtypable_boolean import SBool
from .maybe import MayBe

L = TypeVar('L', covariant=True)
R = TypeVar('R', covariant=True)

class EitherBool(SBool):
    def __repr__(self) -> str: ...

LEFT: EitherBool
RIGHT = EitherBool

class Either[L, R]:
    __slots__ = '_value', '_side'
    __match_args__ = ('_value', '_side')

    U = TypeVar('U', covariant=True)
    V = TypeVar('V', covariant=True)
    T = TypeVar('T')

    @overload
    def __init__(self, value: L) -> None: ...
    @overload
    def __init__(self, value: L, side: object) -> None: ...
    @overload
    def __init__(self, value: R, side: object) -> None: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __iter__(self) -> Iterator[L]: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...
    def get(self) -> L | Never: ...
    def get_left(self) -> MayBe[L]: ...
    def get_right(self) -> MayBe[R]: ...
    def map_right[V](self, f: Callable[[R], V]) -> Either[L, V]: ...
    def map[U](self, f: Callable[[L], U]) -> Either[U, R]: ...
    def bind[U](self, f: Callable[[L], Either[U, R]]) -> Either[U, R]: ...
    def map_except[U](self, f: Callable[[L], U], fallback_right: R) -> Either[U, R]: ...
    def bind_except[U](
        self, f: Callable[[L], Either[U, R]], fallback_right: R
    ) -> Either[U, R]: ...
    @staticmethod
    def sequence[U, V](
        sequence_xor_uv: Sequence[Either[U, V]],
    ) -> Either[Sequence[U], V]: ...
